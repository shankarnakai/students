/**
 * Students API
 * Students API
 *
 * OpenAPI spec version: 1.1.0-oas3
 * Contact: shankar.nakai@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';

import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';



import { Observable } from 'rxjs/Observable';



import { StudentDetail } from '../model/studentDetail';

import { StudentList } from '../model/studentList';


import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';





@Injectable()


export class StudentService {


  protected basePath = 'https://virtserver.swaggerhub.com/shankarnakai/StudentsAPI/1.0.0';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }




  /**
   * searches for students&#x27; first name or/and last name
   * Get student&#x27;s detail by email
   * @param email Student&#x27;s email to return
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public getStudent(email: string, observe?: 'body', reportProgress?: boolean): Observable<StudentDetail>;
  public getStudent(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentDetail>>;
  public getStudent(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentDetail>>;
  public getStudent(email: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {




    if (email === null || email === undefined) {
      throw new Error('Required parameter email was null or undefined when calling getStudent.');
    }




    let headers = this.defaultHeaders;



    // to determine the Accept header
    let httpHeaderAccepts: string[] = [

      'application/json',

      'application/xml'

    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {


      headers = headers.set('Accept', httpHeaderAcceptSelected);

    }

    // to determine the Content-Type header
    const consumes: string[] = [

    ];




    return this.httpClient.get(`${this.basePath}/students/${encodeURIComponent(String(email))}`,
      {


        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );


  }


  /**
   * searches for students&#x27; first name or/and last name
   * By passing the first name search for students by their name (first, last, or both). 
   * @param first pass a first name to look up in the datastore
   * @param last pass a last name to look up in the datastore
   * @param skip number of records to skip for pagination
   * @param limit maximum number of records to return
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public searchStudents(first?: string, last?: string, skip?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<StudentList>;
  public searchStudents(first?: string, last?: string, skip?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentList>>;
  public searchStudents(first?: string, last?: string, skip?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentList>>;
  public searchStudents(first?: string, last?: string, skip?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {














    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });





    if (first !== undefined && first !== null) {


      queryParameters = queryParameters.set('first', <any>first);

    }




    if (last !== undefined && last !== null) {


      queryParameters = queryParameters.set('last', <any>last);

    }




    if (skip !== undefined && skip !== null) {


      queryParameters = queryParameters.set('skip', <any>skip);

    }




    if (limit !== undefined && limit !== null) {


      queryParameters = queryParameters.set('limit', <any>limit);

    }




    let headers = this.defaultHeaders;



    // to determine the Accept header
    let httpHeaderAccepts: string[] = [

      'application/json',

      'application/xml'

    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {


      headers = headers.set('Accept', httpHeaderAcceptSelected);

    }

    // to determine the Content-Type header
    const consumes: string[] = [

    ];




    return this.httpClient.get(`${this.basePath}/students`,
      {

        params: queryParameters,


        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );


  }
}
